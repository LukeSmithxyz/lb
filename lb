#!/bin/bash
name="Luke Smith"
webdir="$PWD"
website="https://lukesmith.xyz/" # Keep a trailing slash.
css="../style.css"
blogfile="2019.html"
indexfile="blogindex.html"
rssfile="rss.xml"
[ -z "$EDITOR" ] && EDITOR="vim"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

if [ ! -d "$webdir/blog/.drafts" ]; then
	read -e -n 1 -p "Initialize blog in $webdir?" ask

	case $ask in
		[Yy])
			printf "Initializing blog system...\\n"

			Drafts="$webdir/blog/.drafts"
			if [ -w "${Drafts%/*}" ]; then
				mkdir -pv "$webdir/blog/.drafts"
			else
				FAIL 1 $LINENO "Write access required for directory creation."
			fi

			echo "Options +Indexes" > "$webdir/blog/.htaccess" ;;
		*)
			exit ;;
	esac
fi

newpost() {
	read -ep "Give a title for your post: " title
	if [[ "$title" == *\"* ]]; then
		FAIL 1 $LINENO 'Double quotation marks (") found in title.'
	else
		url() {
			awk -F '\0' '
				{
					gsub(/([:punct:]|^-|-$)/, "", $1)
					gsub(/(\s|-\+)/, "-", $1)
					printf("%s\n", tolower($1))
				}
			' <<< "$(iconv -cf UTF-8 -t ASCII//TRANSLIT <<< "$title")"
		}

		local HTAccess="$webdir/blog/.htaccess"
		if [ -f "$HTAccess" ] && [ -r "$HTAccess" ]; then
			printf "AddDescription \"%s\" \"%s.html\"\n" "$title" "$(url)" >> "$HTAccess"
		else
			FAIL 1 $LINENO "File '.htaccess' missing or unreadable."
		fi

		if [ -f "$webdir/blog/.drafts/$url.html" ]; then
			FAIL 1 $LINENO "Pre-existing draft entry of the same name/URL."
		elif [ -f "$webdir/blog/$url.html" ]; then
			FAIL 1 $LINENO "Pre-existing published entry of the same name/URL."
		fi

		$EDITOR "$webdir/blog/.drafts/$url.html"

		unset -f url
	fi

	unset title
}

listandReturn() {
	printf "Listing contents of %s.\n" "$1"
	ls -rc "$1" | awk -F '/' '{print $NF}' | nl
	read -erp "Pick an entry by number to $2, or press ctrl-c to cancel. " number
	chosen="$(ls -rc "$1" | nl | grep -w  "$number" | awk '{print $2}')"
	basefile="$(basename "$chosen")" && base="${basefile%.*}"
}

publish() { \
	delete
	htaccessentry=$(grep "$basefile" "$webdir/blog/.htaccess")
	realname="$(echo "$htaccessentry" | cut -d'"' -f2)"
	rssdate="$(grep "$basefile" blog/.htaccess | sed "s/.*\.html\"* *#*//g" | tr -d '\n')"
	[ -z "$rssdate" ] && rssdate="$(LC_TIME=en_US date '+%a, %d %b %Y %H:%M:%S %z')" # RSS date formats must comply with standards to validate.
	webdate="$(date '+%a, %d %b %Y %H:%M:%S %z')" # But this visible date you can set to any format.
	tmpdir=$(mktemp -d)
	printf "<html>\\n<head>\\n<title>%s</title>\\n<link rel='stylesheet' type='text/css' href='%s'>\\n<meta charset='utf-8'/>\\n</head>\\n<body>\\n<h1>%s</h1>\\n<small>[<a href='%s#%s'>link</a>&mdash;<a href='%s'>standalone</a>]</small>\\n%s\\n<footer>by <strong><a href='%s'>%s</a></strong></footer>\\n</body>\\n\\n</html>" "$realname" "$css" "$realname" "../$blogfile" "$base" "$basefile" "$(cat "$webdir/blog/.drafts/$basefile")" "$website" "$name" > "$webdir/blog/$basefile"
	printf "\\n<item>\\n<title>%s</title>\\n<guid>%s%s#%s</guid>\\n<pubDate>%s</pubDate>\\n<description><![CDATA[\\n%s\\n]]></description>\\n</item>\\n\\n" "$realname" "$website" "$blogfile" "$base" "$rssdate" "$(cat "$webdir/blog/.drafts/$basefile")" >  "$tmpdir/rss"
	printf "<div class='entry'>\\n<h2 id='%s'>%s</h2>\\n<small>[<a href='#%s'>link</a>&mdash;<a href='%s'>standalone</a>]</small>\\n%s\\n<small>%s</small>\\n</div>\\n" "$base" "$realname" "$base" "blog/$basefile" "$(cat "$webdir/blog/.drafts/$basefile")" "$webdate" > "$tmpdir/html"
	printf "<li>%s &ndash; <a href=\"blog/%s\">%s</a></li>\\n" "$(date '+%Y %b %d')" "$basefile" "$realname" > "$tmpdir/index"
	sed -i "/<!-- LB -->/r $tmpdir/html" "$blogfile"
	sed -i "/<!-- LB -->/r $tmpdir/rss" "$rssfile"
	sed -i "/<!-- LB -->/r $tmpdir/index" "$indexfile"
	sed -i "/ \"$base.html\"/d" "$webdir/blog/.htaccess"
	echo "AddDescription \"$realname\" \"$basefile\" #$rssdate" >> "$webdir/blog/.htaccess"
	rm -f "$webdir/blog/.drafts/$chosen"
}

confirm() { read -erp "Really $1 \"$base\"? (y/N) " choice && echo "$choice" | grep -i "^y$" >/dev/null || exit 1 ;}

delete() { \
	sed -i "/<item/{:a;N;/<\\/item>/!ba};/#$base<\\/guid/d" $rssfile
	sed -i "/<div class='entry'>/{:a;N;/<\\/div>/!ba};/id='$base'/d" $blogfile
	sed -i "/<li>.*<a href=\"blog\\/$base.html\">/d" $indexfile
	rm "$webdir/blog/$basefile" 2>/dev/null && printf "Old blog entry removed.\\n" ;}

revise() { awk '/^<small>\[/{flag=1;next}/<footer>/{flag=0}flag' "$webdir/blog/$chosen" > "$webdir/blog/.drafts/$basefile"
	"$EDITOR" "$webdir/blog/.drafts/$basefile"
	printf "Revision stored in blog/.drafts. Publish as normal entry when desired.\\n" ;}

case "$1" in
	n*) newpost ;;
	e*) listandReturn "$webdir"/blog/.drafts/ edit && "$EDITOR" "$webdir/blog/.drafts/$chosen" ;;
	p*) listandReturn "$webdir"/blog/.drafts/ publish && publish ;;
	t*) listandReturn "$webdir"/blog/.drafts/ trash && confirm trash && rm -f "$webdir/blog/.drafts/$chosen" && sed -i "/ \"$base.html\"/d" "$webdir/blog/.htaccess" ; printf "Draft deleted.\\n" ;;
	d*) listandReturn "$webdir"/blog/ delete && confirm delete && delete && sed -i "/ \"$base.html\"/d" "$webdir/blog/.htaccess" ;;
	r*) listandReturn "$webdir"/blog/ revise && revise ;;
	*) printf "lb blog system by Luke Smith <luke@lukesmith.xyz>\\nUsage:\\n  lb n:\\tnew draft\\n  lb e:\\tedit draft\\n  lb p:\\tpublish/finalize draft\\n  lb r:\\trevise published entry\\n  lb t:\\tdiscard draft\\n  lb d:\\tdelete published entry\\n\\nBe sure to have the following pattern added to your RSS feed, blog file and blog index:\\n\\n<!-- LB -->\\n\\nNew content will be added directly below that sequence. This is required.\\nSee https://github.com/LukeSmithxyz/lb for more.\\n" ;;
esac
