#!/bin/bash
name="Luke Smith"
webdir="$PWD"
website="https://lukesmith.xyz/" # Keep a trailing slash.
css="../style.css"
blogfile="2019.html"
indexfile="blogindex.html"
rssfile="rss.xml"
HTAccess="$webdir/blog/.htaccess"
[ -z "$EDITOR" ] && EDITOR="vim"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

if [ ! -d "$webdir/blog/.drafts" ]; then
	read -e -n 1 -p "Initialize blog in $webdir?" ask

	case $ask in
		[Yy])
			printf "Initializing blog system...\\n"

			Drafts="$webdir/blog/.drafts"
			if [ -w "${Drafts%/*}" ]; then
				mkdir -pv "$webdir/blog/.drafts"
			else
				FAIL 1 $LINENO "Write access required for directory creation."
			fi

			echo "Options +Indexes" > "$HTAccess" ;;
		*)
			exit ;;
	esac
fi

newpost() {
	read -ep "Give a title for your post: " title
	if [[ $title == *\"* ]]; then
		FAIL 1 $LINENO 'Double quotation marks (") found in title.'
	else
		url() {
			awk -F '\0' '
				{
					gsub(/([:punct:]|^-|-$)/, "", $1)
					gsub(/(\s|-\+)/, "-", $1)
					gsub(/\//, "_", $1)
					printf("%s\n", tolower($1))
				}
			' <<< "$(iconv -cf UTF-8 -t ASCII//TRANSLIT <<< "$title")"
		}

		if [ -f "$HTAccess" ] && [ -r "$HTAccess" ]; then
			printf "AddDescription \"%s\" \"%s.html\"\n" "$title" "$(url)" >> "$HTAccess"
		else
			FAIL 1 $LINENO "File '.htaccess' missing or unreadable."
		fi

		if [ -f "$webdir/blog/.drafts/$url.html" ]; then
			FAIL 1 $LINENO "Pre-existing draft entry of the same name/URL."
		elif [ -f "$webdir/blog/$url.html" ]; then
			FAIL 1 $LINENO "Pre-existing published entry of the same name/URL."
		fi

		$EDITOR "$webdir/blog/.drafts/$url.html"

		unset -f url
	fi

	unset title
}

listandReturn() {
	readarray ListArr <<< "$(ls -rc1 "$1")"
	declare -i MaxNum=$[${#ListArr[@]} + 1]

	printf "Listing contents of '%s'...\n" "$1"
	declare -i Count=0
	for Iter in "${ListArr[@]}"; {
		printf "%6d  %s" $[Count + 1] "$Iter"
		Count+=1
	}

	read -ep "Pick an entry to '$2', or 'Ctrl-C' to cancel: "
	if [[ $REPLY =~ ^[0-9]+$ ]]; then
		chosen=${ListArr[REPLY - 1]}
		basefile=${ListArr[REPLY - 1]##*/}
		base=${basefile%.*}
	elif [ "$REPLY" -lt 1 -o "$REPLY" -gt $MaxNum ]; then
		FAIL 1 $LINENO "Invalid response -- out of range."
	else
		FAIL 1 $LINENO "Invalid response -- integer (1-$MaxNum) required."
	fi

	unset Iter ListArr
}

publish() {
	delete

	realname=$(awk -F '"' -v B="$basefile" '/$basefile/{print($2)}' "$HTAccess")
	rssdate=$(grep "$basefile" blog/.htaccess | sed "s/.*\.html\"* *#*//g" | tr -d '\n')

	if [ -z "$rssdate" ]; then
		# RSS date formats must comply with standards to validate.
		rssdate=$(LC_TIME=en_US date '+%a, %d %b %Y %H:%M:%S %z')
	fi

	# But this visible date you can set to any format.
	printf -v webdate '%(%a, %d %b %Y %H:%M:%S %z)T'

	tmpdir=$(mktemp -d)

	> "$webdir/blog/$basefile"
	while read; do
		printf "%s\n" "$REPLY" >> "$webdir/blog/$basefile"
	done <<-EOF
		<html>

		<head>
		<title>$realname</title>
		<link rel='stylesheet' type='text/css' href='$css'>
		<meta charset='utf-8'/>
		</head>
		<body>
		<h1>$realname</h1>
		<small>[<a href='../$blogfile#$base'>link</a>&mdash;<a href='$basefile'>standalone</a>]</small>
		$(< "$webdir/blog/.drafts/$basefile")
		<footer>by <strong><a href='$website'></a>$name</strong></footer>
		</body>

		</html>
	EOF

	> "$tmpdir/rss"
	while read; do
		printf "%s\n" "$REPLY" >> "$tmpdir/rss"
	done <<-EOF

		<item>
		<title>$realname</title>
		<guid>$website$blogfile#$base</guid>
		<pubDate>$rssdate</pubDate>
		<description><![CDATA[
		$(< "$webdir/blog/.drafts/$basefile")
		]]></description>
		</item>

	EOF

	> "$tmpdir/html"
	while read; do
		printf "%s\n" "$REPLY" >> "$tmpdir/html"
	done <<-EOF
		<div class='entry'>
		<h2 id='$base'>$realname</h2>
		<small>[<a href='#$base'>link</a>&mdash;<a href='blog/$basefile'>standalone</a>]</small>
		$(< "$webdir/blog/.drafts/$basefile")
		<small>$webdate</small>
		</div>

	EOF

	sed -i "/<!-- LB -->/r $tmpdir/html" "$blogfile"
	sed -i "/<!-- LB -->/r $tmpdir/rss" "$rssfile"
	sed -i "/<!-- LB -->/r $tmpdir/index" "$indexfile"
	sed -i "/ \"$base.html\"/d" "$HTAccess"

	printf "<li>%(%Y %b %d)T &ndash; <a href=\"blog/%s\">%s</a></li>\n" -1 "$basefile" "$realname" > "$tmpdir/index"
	printf "AddDescription \"%s\" \"%s\" #%s\n" "$realname" "$basefile" "$rssdate" >> "$HTAccess"

	rm -f "$webdir/blog/.drafts/$chosen"
}

confirm() {
	read -ep "Really $1 \"$base\"? (y/N) "
	case $REPLY in
		[yY]) return 0 ;;
		   *) return 1 ;;
	esac
}

delete() {
	sed -i "/<item/{:a;N;/<\\/item>/!ba};/#$base<\\/guid/d" "$rssfile"
	sed -i "/<div class='entry'>/{:a;N;/<\\/div>/!ba};/id='$base'/d" "$blogfile"
	sed -i "/<li>.*<a href=\"blog\\/$base.html\">/d" "$indexfile"

	if rm "$webdir/blog/$basefile" 2>/dev/null; then
		printf "Old blog entry successfully removed.\n"
	else
		FAIL 0 $LINENO "Old blog entry failed to be removed."
	fi
}

revise() {
	awk '
		/^<small>\[/{flag=1;next}/<footer>/{flag=0}flag
	' "$webdir/blog/$chosen" > "$webdir/blog/.drafts/$basefile"

	"$EDITOR" "$webdir/blog/.drafts/$basefile"
	printf "Revision stored in 'blog/.drafts' -- publish as normal entry when desired.\n"
}

case "$1" in
	n*)
		newpost ;;
	e*)
		listandReturn "$webdir/blog/.drafts/" edit
		$EDITOR "$webdir/blog/.drafts/$chosen" ;;
	p*)
		listandReturn "$webdir/blog/.drafts/" publish
		publish ;;
	t*)
		listandReturn "$webdir/blog/.drafts/" trash
		confirm trash && rm -f "$webdir/blog/.drafts/$chosen" || exit 1
		sed -i "/ \"$base.html\"/d" "$HTAccess"
		printf "Draft deleted.\n" ;;
	d*)
		listandReturn "$webdir"/blog/ delete
		confirm delete && delete || exit 1
		sed -i "/ \"$base.html\"/d" "$HTAccess" ;;
	r*)
		listandReturn "$webdir"/blog/ revise
		revise ;;
	*)
		while read; do
			printf "%s\n" "$REPLY"
		done <<-EOF
			            LB - Full Program Name Here (Version?)
			            Written by Luke Smith <luke@lukesmith.xyz>

			            Simple blog management system for your terminal.

			SYNTAX:     lb [OPT]

			OPTS:       new|n                   - Begin a new draft.
			            edit|e                  - Edit an existing draft.
			            publish|p               - Publish or finalize a draft.
			            revise|r                - Revise a published entry.
			            discard|t               - Discard an existing draft.
			            delete|d                - Delete a published entry.

			NOTE:       Be sure to have the following pattern added to your RSS
			            feed, blog file and blog index:

			              <!-- LB -->

			            New content will be added directly below that sequence. This
			            is required.

			SITE:       https://github.com/LukeSmithxyz/lb
		EOF

		;;
esac
